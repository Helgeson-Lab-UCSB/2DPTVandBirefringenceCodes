function r = Nfeature3rawim(img,lambda,w,field,Imin, nshift)
%      7-29-03  Maria Kilfoil
%extent should be 2*w+1 in which w is the same as bpass2.
% 	Finds and measures roughly circular 'features' within an image.
%  CALLING SEQUENCE:
% 	f = feature( image, diameter,field,Imin )
%  INPUTS:
% 	image:	(nx,ny) array which presumably contains some features worth finding
% 	extent: a parameter which should be a little greater than the diameter of the 
%           largest features in the image. Diameter MUST BE ODD valued.
% 	separation: an optional parameter which specifies the minimum allowable separation 
%           between feature centers. The default value is diameter+1.
% 	masscut: (*to add*) Setting this parameter saves runtime by reducing the runtime wasted on 
%           low mass 'noise' features.
% 	Imin: 	Set this optional parameter to the minimum allowed value for the peak 
%           brightness of a feature. Useful for limiting the number of spurious features in
% 	noisy images.
% 	field: 	Set this keyword if image is actually just one field of an interlaced 
%           (e.g. video) image. All the masks will then be constructed with a 2:1 aspect ratio.
% 	iterate: (to add later) if the refined centroid position is too far from the initial estimate, 
%           iteratively recalc. the centroid using the last cetroid to position the mask.  This 
% 	can be useful for really noisy data, or data with flat (e.g. saturated) peaks.  
%           Use with caution- it may 'climb' hills and give you multiple hits.
%  OUTPUTS:
% 		f(:,1):	the x centroid positions, in pixels.
% 		f(:,2): the y centroid positions, in pixels. 
% 		f(:,3): integrated brightness of the features. ("mass")
% 		f(:,4): the square of the radius of gyration of the features.
% 		    (second moment of the "mass" distribution, where mass=intensity)
% 		f(:,5): eccentricity, which should be zero for circularly symmetric features and 
%                   order one for very elongated images.
%  RESTRICTIONS:
%       To work properly, the image must consist of bright, circularly symmetric regions 
%       on a roughly zero-valued background. To find dark features, the image should be 
%       inverted and the background subtracted. If the image contains a large amount of 
%       high spatial frequency noise, performance will be improved by first filtering the image.
%       BPASS will remove high spatial frequency noise, and subtract the image background. 
%       Individual features should NOT overlap.
%
extent=2*w+1;
image = bpass3(img,lambda,w);
% image=img;
if (mod(extent,2) == 0),
    disp('Requires an odd extent.  Adding 1...');
    extent = extent + 1;
end
sz = size(image); size(image)
nx = sz(2);
ny = sz(1);
% if n_params() eq 2 then sep = extent+1
sep = extent; %sep separation   


%       Put a border around the image to prevent mask out-of-bounds
% a = zeros( ny + extent, nx + extent );
% a(fix(extent/2)+1:(fix(extent/2))+ny,fix(extent/2)+1:(fix(extent/2))+nx) = image;
%New   It seems that it has already had a border of w width
a=img;
whos a
% nx = nx + extent;   % a doesn't change at all if we don't add a border to
% it


%       Finding local maxima
loc= localmax3nodilate(image,sep,field,Imin);
if (loc(1) == -1)
    r = -1;
    return
else
    ;
end
y = mod(loc,ny);
x = fix(loc / ny+1);  %the pixel position of the maximum
% ** make x,y double precision? **
nmax=length(loc);           %number of feathers?
m=zeros(length(loc),1);
xl = x - fix(extent/2);
xh = xl + extent -1;         %xh-xl=extent-1 which is diameter of the feature

%       Set up some masks
rsq = rsqd( extent,extent );
t = thetarr( extent );

mask = le(rsq,(extent/2)^2);       %get a circular unit mask
mask2 = ones(1,extent)'*[1:extent];
mask2 = mask2.*mask;              %get a circular mask, increasing with collum
mask3= (rsq.*mask) + (1/6);
cen = (extent-1)/2 +1;                %mask center
% cmask = vpa(cos(sym('2')*t)).*mask;  
% ultra high presision, since Matlab and IDL differ here
cmask = cos(2*t).*mask;
% smask = vpa(sin(sym('2')*t)).*mask;
smask = sin(2*t).*mask;
cmask(cen,cen) = 0.0;
smask(cen,cen) = 0.0;   %give zero value to the center of the mask

%	Extract fields of the masks, if necessary
%  ** this has not been tested yet **
if (or(field==1,field==0))==1
    ;
%     suba = zeros(extent , fix(extent/2) , nmax);
%     mask = fieldof(mask,0);
%     xmask = fieldof(mask2,0);
%     ymask = fieldof(mask2',0);
%     mask3 = fieldof(mask3,0);
%     cmask = fieldof(cmask,0);
%     smask = fieldof(smask,0);
%     
%     halfext = fix( extent /2 );
%     yl = y - fix(halfext/2);
%     yh = yl + halfext -1;
%     yscale = 2;
%     ycen = (cen+1)/2;
    
elseif field == 2
    suba = zeros(extent, extent, nmax);
    xmask = mask2;
    ymask = mask2';
    yl = y - fix(extent/2);
    yh = yl + extent -1;           %one diameter high
	yscale = 1;
	ycen = cen;                   %just (extent+1)/2
else
    error('Field parameter in localmax must be 0,1 or 2');
end

%	Estimate the mass	
for i=1:nmax, 
    m(i) = sum(sum(double(a(fix(yl(i)):fix(yh(i)),fix(xl(i)):fix(xh(i)))).*mask));   %get total mass for each feature
end

disp(strcat(num2str(nmax,'%01.0f'),' features found.'));

%	Setup some result arrays
xc = zeros(nmax,1);
yc = zeros(nmax,1);
rg = zeros(nmax,1);
e  = zeros(nmax,1);
%	Calculate feature centers
for i=1:nmax,
	xc(i) = sum(sum(double(a(fix(yl(i)):fix(yh(i)),fix(xl(i)):fix(xh(i)))).*xmask));  
	yc(i) = sum(sum(double(a(fix(yl(i)):fix(yh(i)),fix(xl(i)):fix(xh(i)))).*ymask));
end
% x1=x;
% y1=y;
%	Correct for the 'offset' of the centroid masks
xc = xc./m - ((extent+1)/2);             
yc = (yc./m - (extent+1)/2)/yscale;  %get mass center
% xc
% yc
%	Update the positions and correct for the width of the 'border'
x = x + xc - 0*fix(extent/2);
y = ( y + yc - 0*fix(extent/2) ) * yscale;
% x2=x;
% y2=y;
xn=x;
yn=y;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    xcn=xc;
    ycn=yc;
%	Construct the subarray and calculate the mass, radii of gyration squared, eccentricity
for j=1:nshift
%     nmax=5;
   for i=1:nmax,
       if fix(yl(i))-1>0 & fix(yh(i))+1<=ny & fix(xl(i))-1>0 & fix(xh(i))+1<=nx
    suba = fracshift( double(a(fix(yl(i))-1:fix(yh(i))+1,fix(xl(i))-1:fix(xh(i))+1)), -xcn(i) , -ycn(i) );
%     suba
    subaa(:,:,i)=suba(2:end-1, 2:end-1);
%     subaa
%     suba = fracshift( double(a(fix(yl(i)):fix(yh(i)),fix(xl(i)):fix(xh(i)))), -xcn(i) , -ycn(i) );  
%     suba
%     xcn(i)
%     ycn(i)
       else
    suba = fracshift( double(a(fix(yl(i)):fix(yh(i)),fix(xl(i)):fix(xh(i)))), -xcn(i) , -ycn(i) );  
    subaa(:,:,i)=suba;
       end
    m(i) = sum(sum(( subaa(:,:,i).*mask )));             % mass
    rg(i) = (sum(sum( subaa(:,:,i).*mask3 ))) / m(i);    % radii of gyration squared
    tmp = sqrt(( (sum(sum( subaa(:,:,i).*cmask )))^2 ) +( (sum(sum( subaa(:,:,i).*smask )))^2 )); 
    tmp2 = (m(i)-subaa(cen,ycen, i)+1e-6);
    e(i) = tmp/tmp2;                                    % eccentricity
   end
   for i=1:nmax,
	xc(i) = sum(sum(double(subaa(:,:,i)).*xmask));  
	yc(i) = sum(sum(double(subaa(:,:,i)).*ymask));
   end
   
xc = xc./ m - ((double(extent(1))+1.0)/2.0);
yc = yc./ m - ((double(extent(1))+1.0)/2.0);
xcn=xc+xcn;
ycn=yc+ycn; 
x = x + xc ;
y = y + yc ;
if j==nshift-1
    xn = x;
    yn = y;
end
end
r = [xn,yn,m,rg,e];
%b;


% for i=1:nmax,
%     suba(:,:,i) = fracshift( double(a(fix(yl(i)):fix(yh(i)),fix(xl(i)):fix(xh(i)))), -xc(i) , -yc(i) );
%     m(i) = sum(sum(( suba(:,:,i).*mask )));             % mass
%     rg(i) = (sum(sum( suba(:,:,i).*mask3 ))) / m(i);    % radii of gyration squared
%     tmp = sqrt(( (sum(sum( suba(:,:,i).*cmask )))^2 ) +( (sum(sum( suba(:,:,i).*smask )))^2 )); 
%     tmp2 = (m(i)-suba(cen,ycen,i)+1e-6);
%     e(i) = tmp/tmp2;                                    % eccentricity
% end
% for i=1:nmax,
% 	xc(i) = sum(sum(double(suba(:,:,i)).*xmask));  
% 	yc(i) = sum(sum(double(suba(:,:,i)).*ymask));
% end
% xc = xc./m - ((extent+1)/2);             
% yc = (yc./m - (extent+1)/2)/yscale;  %get mass center
% x3 = x2 + xc - 0*fix(extent/2);
% y3 = ( y2 + yc - 0*fix(extent/2) ) * yscale;
% 
% r = [x2,y2,m,rg,e];


